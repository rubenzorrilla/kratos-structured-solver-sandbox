import math
import numpy

def CalculateRightHandSide(a, b, c, mu, rho, v, p, f, acc, v_conv):
    RHS = numpy.empty(8)
    cRHS0 = 0.211324865405187*v[3,0]
    cRHS1 = 0.788675134594813*v[1,0]
    cRHS2 = 0.788675134594813*v[0,0] - 0.211324865405187*v[2,0]
    cRHS3 = cRHS0 - cRHS1 + cRHS2
    cRHS4 = 1/a
    cRHS5 = 0.166666666666667*v_conv[1,0] + 0.166666666666667*v_conv[3,0]
    cRHS6 = cRHS4*(cRHS5 + 0.622008467928146*v_conv[0,0] + 0.0446581987385205*v_conv[2,0])
    cRHS7 = 0.211324865405187*v[1,0]
    cRHS8 = 0.788675134594813*v[3,0]
    cRHS9 = cRHS2 + cRHS7 - cRHS8
    cRHS10 = 1/b
    cRHS11 = 0.166666666666667*v_conv[1,1] + 0.166666666666667*v_conv[3,1]
    cRHS12 = cRHS10*(cRHS11 + 0.622008467928146*v_conv[0,1] + 0.0446581987385205*v_conv[2,1])
    cRHS13 = rho*(cRHS12*cRHS9 + cRHS3*cRHS6)
    cRHS14 = 0.166666666666667*f[1,0] + 0.166666666666667*f[3,0]
    cRHS15 = rho*(cRHS14 + 0.622008467928146*f[0,0] + 0.0446581987385205*f[2,0])
    cRHS16 = 0.211324865405187*v[0,0] - 0.788675134594813*v[2,0]
    cRHS17 = cRHS16 - cRHS7 + cRHS8
    cRHS18 = cRHS4*(cRHS5 + 0.0446581987385205*v_conv[0,0] + 0.622008467928146*v_conv[2,0])
    cRHS19 = -cRHS0 + cRHS1 + cRHS16
    cRHS20 = cRHS10*(cRHS11 + 0.0446581987385205*v_conv[0,1] + 0.622008467928146*v_conv[2,1])
    cRHS21 = rho*(cRHS17*cRHS18 + cRHS19*cRHS20)
    cRHS22 = rho*(cRHS14 + 0.0446581987385205*f[0,0] + 0.622008467928146*f[2,0])
    cRHS23 = a**(-2)
    cRHS24 = 0.622008467928146*v[0,0]
    cRHS25 = 0.622008467928146*v[1,0]
    cRHS26 = 0.166666666666667*v[3,0]
    cRHS27 = -0.166666666666667*v[2,0]
    cRHS28 = cRHS26 + cRHS27
    cRHS29 = cRHS24 - cRHS25 + cRHS28
    cRHS30 = b**(-2)
    cRHS31 = 0.0446581987385205*v[0,0]
    cRHS32 = 0.0446581987385205*v[3,0]
    cRHS33 = 0.166666666666667*v[1,0]
    cRHS34 = cRHS27 + cRHS33
    cRHS35 = cRHS30*(cRHS31 - cRHS32 + cRHS34)
    cRHS36 = 1.0*mu
    cRHS37 = 0.0446581987385205*v[1,0]
    cRHS38 = cRHS28 + cRHS31 - cRHS37
    cRHS39 = 0.622008467928146*v[3,0]
    cRHS40 = cRHS30*(cRHS24 + cRHS34 - cRHS39)
    cRHS41 = 2.0*p
    cRHS42 = cRHS4*cRHS41
    cRHS43 = -cRHS42
    cRHS44 = cRHS19*cRHS30
    cRHS45 = cRHS17*cRHS23 + cRHS44
    cRHS46 = 0.211324865405187*mu
    cRHS47 = cRHS30*cRHS9
    cRHS48 = cRHS23*cRHS3 + cRHS47
    cRHS49 = 0.788675134594813*mu
    cRHS50 = cRHS10*cRHS4
    cRHS51 = 16.0*cRHS50*mu
    cRHS52 = 0.267949192431123*v_conv[0,0] + 0.267949192431123*v_conv[2,0]
    cRHS53 = 0.267949192431123*v_conv[0,1] + 0.267949192431123*v_conv[2,1]
    cRHS54 = 2.48803387171258*rho/(math.sqrt(a)*math.sqrt(b))
    cRHS55 = 1/(cRHS51 + cRHS54*math.sqrt((cRHS52 + v_conv[1,0] + 0.0717967697244908*v_conv[3,0])**2 + (cRHS53 + v_conv[1,1] + 0.0717967697244908*v_conv[3,1])**2))
    cRHS56 = 0.166666666666667*v_conv[0,0] + 0.166666666666667*v_conv[2,0]
    cRHS57 = cRHS4*(cRHS56 + 0.622008467928146*v_conv[1,0] + 0.0446581987385205*v_conv[3,0])
    cRHS58 = 0.166666666666667*v_conv[0,1] + 0.166666666666667*v_conv[2,1]
    cRHS59 = cRHS10*(cRHS58 + 0.622008467928146*v_conv[1,1] + 0.0446581987385205*v_conv[3,1])
    cRHS60 = rho*(cRHS19*cRHS59 + cRHS3*cRHS57)
    cRHS61 = 0.166666666666667*f[0,0] + 0.166666666666667*f[2,0]
    cRHS62 = rho*(cRHS61 + 0.622008467928146*f[1,0] + 0.0446581987385205*f[3,0])
    cRHS63 = 0.166666666666667*acc[0,0] + 0.166666666666667*acc[2,0]
    cRHS64 = 0.622008467928146*acc[1,0] + 0.0446581987385205*acc[3,0] + cRHS63
    cRHS65 = cRHS36*cRHS50
    cRHS66 = cRHS65*v[0,1]
    cRHS67 = cRHS65*v[2,1]
    cRHS68 = -1.0*cRHS10*cRHS4*mu*v[1,1] - 1.0*cRHS10*cRHS4*mu*v[3,1] + cRHS66 + cRHS67
    cRHS69 = cRHS55*(-cRHS60 - cRHS62 + cRHS64*rho - cRHS68)
    cRHS70 = 0.131445855765802*v_conv[0,0]
    cRHS71 = 0.131445855765802*v_conv[2,0]
    cRHS72 = cRHS70 + cRHS71
    cRHS73 = 0.131445855765802*v_conv[1,1]
    cRHS74 = 0.0352208109008645*v_conv[0,1] + 0.0352208109008645*v_conv[2,1]
    cRHS75 = 1.0*rho
    cRHS76 = cRHS75*(cRHS10*(cRHS73 + cRHS74 + 0.00943738783765593*v_conv[3,1]) + cRHS4*(cRHS72 + 0.490562612162344*v_conv[1,0] + 0.0352208109008645*v_conv[3,0]))
    cRHS77 = 1/(cRHS51 + cRHS54*math.sqrt((cRHS52 + 0.0717967697244908*v_conv[1,0] + v_conv[3,0])**2 + (cRHS53 + 0.0717967697244908*v_conv[1,1] + v_conv[3,1])**2))
    cRHS78 = cRHS4*(cRHS56 + 0.0446581987385205*v_conv[1,0] + 0.622008467928146*v_conv[3,0])
    cRHS79 = cRHS10*(cRHS58 + 0.0446581987385205*v_conv[1,1] + 0.622008467928146*v_conv[3,1])
    cRHS80 = rho*(cRHS17*cRHS78 + cRHS79*cRHS9)
    cRHS81 = rho*(cRHS61 + 0.0446581987385205*f[1,0] + 0.622008467928146*f[3,0])
    cRHS82 = 0.0446581987385205*acc[1,0] + 0.622008467928146*acc[3,0] + cRHS63
    cRHS83 = cRHS77*(-cRHS68 - cRHS80 - cRHS81 + cRHS82*rho)
    cRHS84 = 0.131445855765802*v_conv[3,0]
    cRHS85 = 0.0352208109008645*v_conv[0,0] + 0.0352208109008645*v_conv[2,0]
    cRHS86 = 0.131445855765802*v_conv[0,1]
    cRHS87 = 0.131445855765802*v_conv[2,1]
    cRHS88 = cRHS86 + cRHS87
    cRHS89 = cRHS75*(cRHS10*(cRHS88 + 0.0352208109008645*v_conv[1,1] + 0.490562612162344*v_conv[3,1]) + cRHS4*(cRHS84 + cRHS85 + 0.00943738783765593*v_conv[1,0]))
    cRHS90 = 0.166666666666667*acc[1,0] + 0.166666666666667*acc[3,0]
    cRHS91 = 0.0446581987385205*acc[0,0] + 0.622008467928146*acc[2,0] + cRHS90
    cRHS92 = -cRHS21 - cRHS22 - cRHS68 + cRHS91*rho
    cRHS93 = 0.267949192431123*v_conv[1,0] + 0.267949192431123*v_conv[3,0]
    cRHS94 = 0.267949192431123*v_conv[1,1] + 0.267949192431123*v_conv[3,1]
    cRHS95 = 1/(cRHS51 + cRHS54*math.sqrt((cRHS93 + 0.0717967697244908*v_conv[0,0] + v_conv[2,0])**2 + (cRHS94 + 0.0717967697244908*v_conv[0,1] + v_conv[2,1])**2))
    cRHS96 = cRHS95*rho
    cRHS97 = cRHS92*cRHS96
    cRHS98 = cRHS18 + cRHS20
    cRHS99 = 0.211324865405187*cRHS98
    cRHS100 = 0.211324865405187*cRHS4
    cRHS101 = 0.788675134594813*cRHS4
    cRHS102 = -cRHS100*v_conv[2,0] + cRHS100*v_conv[3,0] + cRHS101*v_conv[0,0] - cRHS101*v_conv[1,0]
    cRHS103 = 0.211324865405187*cRHS10
    cRHS104 = 0.788675134594813*cRHS10
    cRHS105 = cRHS103*v_conv[0,1] - cRHS103*v_conv[3,1] + cRHS104*v_conv[1,1] - cRHS104*v_conv[2,1]
    cRHS106 = cRHS102 + cRHS105
    cRHS107 = 0.166666666666667*rho
    cRHS108 = cRHS106*cRHS107
    cRHS109 = cRHS103*v_conv[1,1] - cRHS103*v_conv[2,1] + cRHS104*v_conv[0,1] - cRHS104*v_conv[3,1]
    cRHS110 = cRHS100*v_conv[0,0] - cRHS100*v_conv[1,0] - cRHS101*v_conv[2,0] + cRHS101*v_conv[3,0]
    cRHS111 = cRHS109 + cRHS110
    cRHS112 = cRHS107*cRHS111
    cRHS113 = 0.622008467928146*acc[0,0] + 0.0446581987385205*acc[2,0] + cRHS90
    cRHS114 = cRHS113*rho - cRHS13 - cRHS15 - cRHS68
    cRHS115 = 1/(cRHS51 + cRHS54*math.sqrt((cRHS93 + v_conv[0,0] + 0.0717967697244908*v_conv[2,0])**2 + (cRHS94 + v_conv[0,1] + 0.0717967697244908*v_conv[2,1])**2))
    cRHS116 = cRHS115*rho
    cRHS117 = cRHS114*cRHS116
    cRHS118 = cRHS12 + cRHS6
    cRHS119 = 0.788675134594813*cRHS118
    cRHS120 = cRHS102 + cRHS109
    cRHS121 = 0.622008467928146*cRHS120
    cRHS122 = cRHS105 + cRHS110
    cRHS123 = 0.0446581987385205*cRHS122
    cRHS124 = 0.166666666666667*cRHS60 + 0.166666666666667*cRHS62 + 0.166666666666667*cRHS80 + 0.166666666666667*cRHS81
    cRHS125 = 0.211324865405187*v[3,1]
    cRHS126 = 0.788675134594813*v[1,1]
    cRHS127 = 0.788675134594813*v[0,1] - 0.211324865405187*v[2,1]
    cRHS128 = cRHS125 - cRHS126 + cRHS127
    cRHS129 = 0.211324865405187*v[1,1]
    cRHS130 = 0.788675134594813*v[3,1]
    cRHS131 = cRHS127 + cRHS129 - cRHS130
    cRHS132 = rho*(cRHS12*cRHS131 + cRHS128*cRHS6)
    cRHS133 = 0.166666666666667*f[1,1] + 0.166666666666667*f[3,1]
    cRHS134 = rho*(cRHS133 + 0.622008467928146*f[0,1] + 0.0446581987385205*f[2,1])
    cRHS135 = 0.211324865405187*v[0,1] - 0.788675134594813*v[2,1]
    cRHS136 = -cRHS129 + cRHS130 + cRHS135
    cRHS137 = -cRHS125 + cRHS126 + cRHS135
    cRHS138 = rho*(cRHS136*cRHS18 + cRHS137*cRHS20)
    cRHS139 = rho*(cRHS133 + 0.0446581987385205*f[0,1] + 0.622008467928146*f[2,1])
    cRHS140 = 0.622008467928146*v[0,1]
    cRHS141 = 0.622008467928146*v[1,1]
    cRHS142 = 0.166666666666667*v[3,1]
    cRHS143 = -0.166666666666667*v[2,1]
    cRHS144 = cRHS142 + cRHS143
    cRHS145 = cRHS140 - cRHS141 + cRHS144
    cRHS146 = 0.0446581987385205*v[0,1]
    cRHS147 = 0.0446581987385205*v[3,1]
    cRHS148 = 0.166666666666667*v[1,1]
    cRHS149 = cRHS143 + cRHS148
    cRHS150 = cRHS30*(cRHS146 - cRHS147 + cRHS149)
    cRHS151 = 0.0446581987385205*v[1,1]
    cRHS152 = cRHS144 + cRHS146 - cRHS151
    cRHS153 = 0.622008467928146*v[3,1]
    cRHS154 = cRHS30*(cRHS140 + cRHS149 - cRHS153)
    cRHS155 = cRHS10*cRHS41
    cRHS156 = -cRHS155
    cRHS157 = cRHS137*cRHS30
    cRHS158 = cRHS136*cRHS23 + cRHS157
    cRHS159 = cRHS131*cRHS30
    cRHS160 = cRHS128*cRHS23 + cRHS159
    cRHS161 = rho*(cRHS128*cRHS57 + cRHS137*cRHS59)
    cRHS162 = 0.166666666666667*f[0,1] + 0.166666666666667*f[2,1]
    cRHS163 = rho*(cRHS162 + 0.622008467928146*f[1,1] + 0.0446581987385205*f[3,1])
    cRHS164 = 0.166666666666667*acc[0,1] + 0.166666666666667*acc[2,1]
    cRHS165 = 0.622008467928146*acc[1,1] + 0.0446581987385205*acc[3,1] + cRHS164
    cRHS166 = cRHS65*v[0,0]
    cRHS167 = cRHS65*v[2,0]
    cRHS168 = -1.0*cRHS10*cRHS4*mu*v[1,0] - 1.0*cRHS10*cRHS4*mu*v[3,0] + cRHS166 + cRHS167
    cRHS169 = cRHS55*(-cRHS161 - cRHS163 + cRHS165*rho - cRHS168)
    cRHS170 = rho*(cRHS131*cRHS79 + cRHS136*cRHS78)
    cRHS171 = rho*(cRHS162 + 0.0446581987385205*f[1,1] + 0.622008467928146*f[3,1])
    cRHS172 = 0.0446581987385205*acc[1,1] + 0.622008467928146*acc[3,1] + cRHS164
    cRHS173 = cRHS77*(-cRHS168 - cRHS170 - cRHS171 + cRHS172*rho)
    cRHS174 = 0.166666666666667*acc[1,1] + 0.166666666666667*acc[3,1]
    cRHS175 = 0.0446581987385205*acc[0,1] + 0.622008467928146*acc[2,1] + cRHS174
    cRHS176 = -cRHS138 - cRHS139 - cRHS168 + cRHS175*rho
    cRHS177 = cRHS176*cRHS96
    cRHS178 = 0.622008467928146*acc[0,1] + 0.0446581987385205*acc[2,1] + cRHS174
    cRHS179 = -cRHS132 - cRHS134 - cRHS168 + cRHS178*rho
    cRHS180 = cRHS116*cRHS179
    cRHS181 = 0.166666666666667*cRHS161 + 0.166666666666667*cRHS163 + 0.166666666666667*cRHS170 + 0.166666666666667*cRHS171
    cRHS182 = -0.0446581987385205*v[2,0]
    cRHS183 = 0.166666666666667*v[0,0]
    cRHS184 = cRHS183 - cRHS26
    cRHS185 = cRHS30*(cRHS182 + cRHS184 + cRHS37)
    cRHS186 = -0.622008467928146*v[2,0]
    cRHS187 = cRHS30*(cRHS184 + cRHS186 + cRHS25)
    cRHS188 = cRHS17*cRHS23 - cRHS47
    cRHS189 = cRHS23*cRHS3 - cRHS44
    cRHS190 = cRHS114*cRHS115
    cRHS191 = 0.0352208109008645*v_conv[1,1] + 0.0352208109008645*v_conv[3,1]
    cRHS192 = 0.131445855765802*v_conv[1,0]
    cRHS193 = cRHS192 + cRHS84
    cRHS194 = cRHS75*(cRHS10*(cRHS191 + cRHS86 + 0.00943738783765593*v_conv[2,1]) - cRHS4*(cRHS193 + 0.490562612162344*v_conv[0,0] + 0.0352208109008645*v_conv[2,0]))
    cRHS195 = 0.131445855765802*v_conv[3,1]
    cRHS196 = cRHS195 + cRHS73
    cRHS197 = 0.0352208109008645*v_conv[1,0] + 0.0352208109008645*v_conv[3,0]
    cRHS198 = cRHS75*cRHS95
    cRHS199 = cRHS198*(cRHS10*(cRHS196 + 0.0352208109008645*v_conv[0,1] + 0.490562612162344*v_conv[2,1]) - cRHS4*(cRHS197 + cRHS71 + 0.00943738783765593*v_conv[0,0]))
    cRHS200 = cRHS83*rho
    cRHS201 = -cRHS78 + cRHS79
    cRHS202 = 0.211324865405187*cRHS201
    cRHS203 = cRHS107*cRHS120
    cRHS204 = 0.166666666666667*cRHS122
    cRHS205 = cRHS69*rho
    cRHS206 = -cRHS57 + cRHS59
    cRHS207 = 0.788675134594813*cRHS206
    cRHS208 = 0.622008467928146*cRHS106
    cRHS209 = 0.0446581987385205*cRHS111
    cRHS210 = 0.166666666666667*cRHS13 + 0.166666666666667*cRHS15 + 0.166666666666667*cRHS21 + 0.166666666666667*cRHS22
    cRHS211 = -0.0446581987385205*v[2,1]
    cRHS212 = 0.166666666666667*v[0,1]
    cRHS213 = -cRHS142 + cRHS212
    cRHS214 = cRHS30*(cRHS151 + cRHS211 + cRHS213)
    cRHS215 = -0.622008467928146*v[2,1]
    cRHS216 = cRHS30*(cRHS141 + cRHS213 + cRHS215)
    cRHS217 = cRHS136*cRHS23 - cRHS159
    cRHS218 = cRHS128*cRHS23 - cRHS157
    cRHS219 = cRHS115*cRHS179
    cRHS220 = cRHS173*rho
    cRHS221 = cRHS169*rho
    cRHS222 = 0.166666666666667*cRHS132 + 0.166666666666667*cRHS134 + 0.166666666666667*cRHS138 + 0.166666666666667*cRHS139
    cRHS223 = cRHS183 - cRHS33
    cRHS224 = cRHS186 + cRHS223 + cRHS39
    cRHS225 = cRHS182 + cRHS223 + cRHS32
    cRHS226 = -cRHS3
    cRHS227 = -cRHS19
    cRHS228 = cRHS65*v[1,1] + cRHS65*v[3,1] - cRHS66 - cRHS67
    cRHS229 = cRHS55*(cRHS228 - cRHS62 + cRHS64*rho + rho*(cRHS226*cRHS57 + cRHS227*cRHS59))
    cRHS230 = -cRHS17
    cRHS231 = -cRHS9
    cRHS232 = cRHS77*(cRHS228 - cRHS81 + cRHS82*rho + rho*(cRHS230*cRHS78 + cRHS231*cRHS79))
    cRHS233 = -cRHS22 + cRHS228 + cRHS91*rho + rho*(cRHS18*cRHS230 + cRHS20*cRHS227)
    cRHS234 = cRHS233*cRHS96
    cRHS235 = 0.622008467928146*cRHS122
    cRHS236 = cRHS113*rho - cRHS15 + cRHS228 + rho*(cRHS12*cRHS231 + cRHS226*cRHS6)
    cRHS237 = cRHS116*cRHS236
    cRHS238 = 0.0446581987385205*cRHS120
    cRHS239 = cRHS75*(cRHS10*(cRHS88 + 0.490562612162344*v_conv[1,1] + 0.0352208109008645*v_conv[3,1]) + cRHS4*(cRHS192 + cRHS85 + 0.00943738783765593*v_conv[3,0]))
    cRHS240 = cRHS75*(cRHS10*(cRHS195 + cRHS74 + 0.00943738783765593*v_conv[1,1]) + cRHS4*(cRHS72 + 0.0352208109008645*v_conv[1,0] + 0.490562612162344*v_conv[3,0]))
    cRHS241 = 0.211324865405187*cRHS118
    cRHS242 = 0.788675134594813*cRHS98
    cRHS243 = -cRHS148 + cRHS212
    cRHS244 = cRHS153 + cRHS215 + cRHS243
    cRHS245 = cRHS147 + cRHS211 + cRHS243
    cRHS246 = -cRHS128
    cRHS247 = -cRHS137
    cRHS248 = -cRHS166 - cRHS167 + cRHS65*v[1,0] + cRHS65*v[3,0]
    cRHS249 = cRHS55*(-cRHS163 + cRHS165*rho + cRHS248 + rho*(cRHS246*cRHS57 + cRHS247*cRHS59))
    cRHS250 = -cRHS136
    cRHS251 = -cRHS131
    cRHS252 = cRHS77*(-cRHS171 + cRHS172*rho + cRHS248 + rho*(cRHS250*cRHS78 + cRHS251*cRHS79))
    cRHS253 = -cRHS139 + cRHS175*rho + cRHS248 + rho*(cRHS18*cRHS250 + cRHS20*cRHS247)
    cRHS254 = cRHS253*cRHS96
    cRHS255 = -cRHS134 + cRHS178*rho + cRHS248 + rho*(cRHS12*cRHS251 + cRHS246*cRHS6)
    cRHS256 = cRHS116*cRHS255
    cRHS257 = cRHS115*cRHS236
    cRHS258 = cRHS232*rho
    cRHS259 = 0.622008467928146*cRHS111
    cRHS260 = cRHS229*rho
    cRHS261 = 0.0446581987385205*cRHS106
    cRHS262 = cRHS75*(cRHS10*(cRHS196 + 0.490562612162344*v_conv[0,1] + 0.0352208109008645*v_conv[2,1]) - cRHS4*(cRHS197 + cRHS70 + 0.00943738783765593*v_conv[2,0]))
    cRHS263 = cRHS198*(cRHS10*(cRHS191 + cRHS87 + 0.00943738783765593*v_conv[0,1]) - cRHS4*(cRHS193 + 0.0352208109008645*v_conv[0,0] + 0.490562612162344*v_conv[2,0]))
    cRHS264 = 0.211324865405187*cRHS206
    cRHS265 = 0.788675134594813*cRHS201
    cRHS266 = cRHS115*cRHS255
    cRHS267 = cRHS252*rho
    cRHS268 = cRHS249*rho
    RHS[0] = cRHS108*cRHS69 + cRHS112*cRHS83 + cRHS117*cRHS119 + cRHS117*cRHS121 + cRHS123*cRHS97 + cRHS124 + 0.622008467928146*cRHS13 + 0.622008467928146*cRHS15 + 0.0446581987385205*cRHS21 + 0.0446581987385205*cRHS22 - cRHS36*(cRHS23*cRHS29 + cRHS35) - cRHS36*(cRHS23*cRHS38 + cRHS40) + cRHS43 - cRHS45*cRHS46 - cRHS48*cRHS49 + cRHS69*cRHS76 + cRHS83*cRHS89 + cRHS97*cRHS99
    RHS[1] = cRHS108*cRHS169 + cRHS112*cRHS173 + cRHS119*cRHS180 + cRHS121*cRHS180 + cRHS123*cRHS177 + 0.622008467928146*cRHS132 + 0.622008467928146*cRHS134 + 0.0446581987385205*cRHS138 + 0.0446581987385205*cRHS139 + cRHS156 - cRHS158*cRHS46 - cRHS160*cRHS49 + cRHS169*cRHS76 + cRHS173*cRHS89 + cRHS177*cRHS99 + cRHS181 - cRHS36*(cRHS145*cRHS23 + cRHS150) - cRHS36*(cRHS152*cRHS23 + cRHS154)
    RHS[2] = cRHS188*cRHS46 + cRHS189*cRHS49 + cRHS190*cRHS194 + cRHS190*cRHS203 + cRHS199*cRHS92 + cRHS200*cRHS202 + cRHS200*cRHS209 + cRHS204*cRHS97 + cRHS205*cRHS207 + cRHS205*cRHS208 + cRHS210 + cRHS36*(-cRHS185 + cRHS23*cRHS29) + cRHS36*(-cRHS187 + cRHS23*cRHS38) + cRHS42 + 0.622008467928146*cRHS60 + 0.622008467928146*cRHS62 + 0.0446581987385205*cRHS80 + 0.0446581987385205*cRHS81
    RHS[3] = cRHS156 + 0.622008467928146*cRHS161 + 0.622008467928146*cRHS163 + 0.0446581987385205*cRHS170 + 0.0446581987385205*cRHS171 + cRHS176*cRHS199 + cRHS177*cRHS204 + cRHS194*cRHS219 + cRHS202*cRHS220 + cRHS203*cRHS219 + cRHS207*cRHS221 + cRHS208*cRHS221 + cRHS209*cRHS220 + cRHS217*cRHS46 + cRHS218*cRHS49 + cRHS222 + cRHS36*(cRHS145*cRHS23 - cRHS214) + cRHS36*(cRHS152*cRHS23 - cRHS216)
    RHS[4] = cRHS108*cRHS229 + cRHS112*cRHS232 + cRHS124 + 0.0446581987385205*cRHS13 + 0.0446581987385205*cRHS15 + 0.622008467928146*cRHS21 + 0.622008467928146*cRHS22 - cRHS229*cRHS239 - cRHS232*cRHS240 + cRHS234*cRHS235 - cRHS234*cRHS242 + cRHS237*cRHS238 - cRHS237*cRHS241 + cRHS36*(cRHS185 + cRHS224*cRHS23) + cRHS36*(cRHS187 + cRHS225*cRHS23) + cRHS42 + cRHS45*cRHS49 + cRHS46*cRHS48
    RHS[5] = cRHS108*cRHS249 + cRHS112*cRHS252 + 0.0446581987385205*cRHS132 + 0.0446581987385205*cRHS134 + 0.622008467928146*cRHS138 + 0.622008467928146*cRHS139 + cRHS155 + cRHS158*cRHS49 + cRHS160*cRHS46 + cRHS181 + cRHS235*cRHS254 + cRHS238*cRHS256 - cRHS239*cRHS249 - cRHS240*cRHS252 - cRHS241*cRHS256 - cRHS242*cRHS254 + cRHS36*(cRHS214 + cRHS23*cRHS244) + cRHS36*(cRHS216 + cRHS23*cRHS245)
    RHS[6] = -cRHS188*cRHS49 - cRHS189*cRHS46 + cRHS203*cRHS257 + cRHS204*cRHS234 + cRHS210 - cRHS233*cRHS263 - cRHS257*cRHS262 + cRHS258*cRHS259 - cRHS258*cRHS265 + cRHS260*cRHS261 - cRHS260*cRHS264 - cRHS36*(cRHS224*cRHS23 - cRHS35) - cRHS36*(cRHS225*cRHS23 - cRHS40) + cRHS43 + 0.0446581987385205*cRHS60 + 0.0446581987385205*cRHS62 + 0.622008467928146*cRHS80 + 0.622008467928146*cRHS81
    RHS[7] = cRHS155 + 0.0446581987385205*cRHS161 + 0.0446581987385205*cRHS163 + 0.622008467928146*cRHS170 + 0.622008467928146*cRHS171 + cRHS203*cRHS266 + cRHS204*cRHS254 - cRHS217*cRHS49 - cRHS218*cRHS46 + cRHS222 - cRHS253*cRHS263 + cRHS259*cRHS267 + cRHS261*cRHS268 - cRHS262*cRHS266 - cRHS264*cRHS268 - cRHS265*cRHS267 - cRHS36*(-cRHS150 + cRHS23*cRHS244) - cRHS36*(-cRHS154 + cRHS23*cRHS245)

    return RHS

def GetCellGradientOperator(a, b, c):
    G = numpy.empty(8)
    cG0 = 2.0/a
    cG1 = -cG0
    cG2 = 2.0/b
    cG3 = -cG2
    G[0] = cG1
    G[1] = cG3
    G[2] = cG0
    G[3] = cG3
    G[4] = cG0
    G[5] = cG2
    G[6] = cG1
    G[7] = cG2

    return G