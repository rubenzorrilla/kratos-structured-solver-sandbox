import math
import numpy

def CalculateRightHandSide(a, b, c, mu, rho, v, p, f, acc, v_conv):
    RHS = numpy.empty(8)
    cRHS0 = a**(-2)
    cRHS1 = 0.622008467928146*v[0,0]
    cRHS2 = 0.166666666666667*v[3,0]
    cRHS3 = -0.166666666666667*v[2,0]
    cRHS4 = cRHS2 + cRHS3
    cRHS5 = cRHS1 + cRHS4 - 0.622008467928146*v[1,0]
    cRHS6 = b**(-2)
    cRHS7 = 0.0446581987385205*v[0,0]
    cRHS8 = 0.0446581987385205*v[3,0]
    cRHS9 = 0.166666666666667*v[1,0]
    cRHS10 = cRHS3 + cRHS9
    cRHS11 = cRHS6*(-cRHS10 - cRHS7 + cRHS8)
    cRHS12 = cRHS4 + cRHS7 - 0.0446581987385205*v[1,0]
    cRHS13 = 0.622008467928146*v[3,0]
    cRHS14 = cRHS6*(-cRHS1 - cRHS10 + cRHS13)
    cRHS15 = 0.788675134594813*v[3,0]
    cRHS16 = 0.211324865405187*v[1,0]
    cRHS17 = 0.211324865405187*v[0,0] - 0.788675134594813*v[2,0]
    cRHS18 = cRHS15 - cRHS16 + cRHS17
    cRHS19 = -cRHS18
    cRHS20 = cRHS0*cRHS19
    cRHS21 = 0.788675134594813*v[1,0]
    cRHS22 = 0.211324865405187*v[3,0]
    cRHS23 = cRHS17 + cRHS21 - cRHS22
    cRHS24 = -cRHS23
    cRHS25 = cRHS24*cRHS6
    cRHS26 = 0.211324865405187*mu
    cRHS27 = 0.788675134594813*v[0,0] - 0.211324865405187*v[2,0]
    cRHS28 = -cRHS21 + cRHS22 + cRHS27
    cRHS29 = -cRHS28
    cRHS30 = cRHS0*cRHS29
    cRHS31 = -cRHS15 + cRHS16 + cRHS27
    cRHS32 = -cRHS31
    cRHS33 = cRHS32*cRHS6
    cRHS34 = 0.788675134594813*mu
    cRHS35 = 0.166666666666667*f[1,0] + 0.166666666666667*f[3,0]
    cRHS36 = rho*(cRHS35 + 0.622008467928146*f[0,0] + 0.0446581987385205*f[2,0])
    cRHS37 = rho*(cRHS35 + 0.0446581987385205*f[0,0] + 0.622008467928146*f[2,0])
    cRHS38 = 1/a
    cRHS39 = 2.0*p
    cRHS40 = cRHS38*cRHS39
    cRHS41 = -cRHS40
    cRHS42 = 0.166666666666667*v_conv[0,0] + 0.166666666666667*v_conv[2,0]
    cRHS43 = cRHS38*(cRHS42 + 0.0446581987385205*v_conv[1,0] + 0.622008467928146*v_conv[3,0])
    cRHS44 = 1/b
    cRHS45 = 0.166666666666667*v_conv[0,1] + 0.166666666666667*v_conv[2,1]
    cRHS46 = cRHS44*(cRHS45 + 0.0446581987385205*v_conv[1,1] + 0.622008467928146*v_conv[3,1])
    cRHS47 = cRHS19*cRHS43 + cRHS32*cRHS46
    cRHS48 = cRHS38*(cRHS42 + 0.622008467928146*v_conv[1,0] + 0.0446581987385205*v_conv[3,0])
    cRHS49 = cRHS44*(cRHS45 + 0.622008467928146*v_conv[1,1] + 0.0446581987385205*v_conv[3,1])
    cRHS50 = cRHS24*cRHS49 + cRHS29*cRHS48
    cRHS51 = 0.166666666666667*v_conv[1,0] + 0.166666666666667*v_conv[3,0]
    cRHS52 = cRHS38*(cRHS51 + 0.622008467928146*v_conv[0,0] + 0.0446581987385205*v_conv[2,0])
    cRHS53 = 0.166666666666667*v_conv[1,1] + 0.166666666666667*v_conv[3,1]
    cRHS54 = cRHS44*(cRHS53 + 0.622008467928146*v_conv[0,1] + 0.0446581987385205*v_conv[2,1])
    cRHS55 = cRHS29*cRHS52 + cRHS32*cRHS54
    cRHS56 = cRHS38*(cRHS51 + 0.0446581987385205*v_conv[0,0] + 0.622008467928146*v_conv[2,0])
    cRHS57 = cRHS44*(cRHS53 + 0.0446581987385205*v_conv[0,1] + 0.622008467928146*v_conv[2,1])
    cRHS58 = cRHS19*cRHS56 + cRHS24*cRHS57
    cRHS59 = cRHS38*cRHS44*mu
    cRHS60 = 16.0*cRHS59
    cRHS61 = 0.267949192431123*v_conv[0,0] + 0.267949192431123*v_conv[2,0]
    cRHS62 = 0.267949192431123*v_conv[0,1] + 0.267949192431123*v_conv[2,1]
    cRHS63 = 2.48803387171258*rho/(math.sqrt(a)*math.sqrt(b))
    cRHS64 = 1/(cRHS60 + cRHS63*math.sqrt((cRHS61 + v_conv[1,0] + 0.0717967697244908*v_conv[3,0])**2 + (cRHS62 + v_conv[1,1] + 0.0717967697244908*v_conv[3,1])**2))
    cRHS65 = 0.166666666666667*acc[0,0] + 0.166666666666667*acc[2,0]
    cRHS66 = rho*(0.622008467928146*acc[1,0] + 0.0446581987385205*acc[3,0] + cRHS65)
    cRHS67 = 0.166666666666667*f[0,0] + 0.166666666666667*f[2,0]
    cRHS68 = rho*(cRHS67 + 0.622008467928146*f[1,0] + 0.0446581987385205*f[3,0])
    cRHS69 = 1.0*cRHS59
    cRHS70 = cRHS69*v[1,1]
    cRHS71 = cRHS69*v[3,1]
    cRHS72 = cRHS69*v[0,1]
    cRHS73 = cRHS69*v[2,1]
    cRHS74 = cRHS70 + cRHS71 - cRHS72 - cRHS73
    cRHS75 = cRHS50*rho + cRHS66 - cRHS68 + cRHS74
    cRHS76 = -cRHS75
    cRHS77 = cRHS64*cRHS76
    cRHS78 = 0.211324865405187*cRHS38
    cRHS79 = 0.788675134594813*cRHS38
    cRHS80 = -0.788675134594813*cRHS38*v_conv[1,0] - 0.211324865405187*cRHS38*v_conv[2,0] + cRHS78*v_conv[3,0] + cRHS79*v_conv[0,0]
    cRHS81 = 0.211324865405187*cRHS44
    cRHS82 = 0.788675134594813*cRHS44
    cRHS83 = -0.788675134594813*cRHS44*v_conv[2,1] - 0.211324865405187*cRHS44*v_conv[3,1] + cRHS81*v_conv[0,1] + cRHS82*v_conv[1,1]
    cRHS84 = cRHS80 + cRHS83
    cRHS85 = -cRHS84
    cRHS86 = 0.166666666666667*rho
    cRHS87 = cRHS85*cRHS86
    cRHS88 = 1/(cRHS60 + cRHS63*math.sqrt((cRHS61 + 0.0717967697244908*v_conv[1,0] + v_conv[3,0])**2 + (cRHS62 + 0.0717967697244908*v_conv[1,1] + v_conv[3,1])**2))
    cRHS89 = rho*(0.0446581987385205*acc[1,0] + 0.622008467928146*acc[3,0] + cRHS65)
    cRHS90 = rho*(cRHS67 + 0.0446581987385205*f[1,0] + 0.622008467928146*f[3,0])
    cRHS91 = cRHS47*rho + cRHS74 + cRHS89 - cRHS90
    cRHS92 = -cRHS91
    cRHS93 = cRHS88*cRHS92
    cRHS94 = -0.211324865405187*cRHS44*v_conv[2,1] - 0.788675134594813*cRHS44*v_conv[3,1] + cRHS81*v_conv[1,1] + cRHS82*v_conv[0,1]
    cRHS95 = -0.211324865405187*cRHS38*v_conv[1,0] - 0.788675134594813*cRHS38*v_conv[2,0] + cRHS78*v_conv[0,0] + cRHS79*v_conv[3,0]
    cRHS96 = cRHS94 + cRHS95
    cRHS97 = -cRHS96
    cRHS98 = cRHS86*cRHS97
    cRHS99 = 0.267949192431123*v_conv[1,0] + 0.267949192431123*v_conv[3,0]
    cRHS100 = 0.267949192431123*v_conv[1,1] + 0.267949192431123*v_conv[3,1]
    cRHS101 = 1/(cRHS60 + cRHS63*math.sqrt((cRHS100 + v_conv[0,1] + 0.0717967697244908*v_conv[2,1])**2 + (cRHS99 + v_conv[0,0] + 0.0717967697244908*v_conv[2,0])**2))
    cRHS102 = 0.166666666666667*acc[1,0] + 0.166666666666667*acc[3,0]
    cRHS103 = rho*(0.622008467928146*acc[0,0] + 0.0446581987385205*acc[2,0] + cRHS102)
    cRHS104 = cRHS103 - cRHS36 + cRHS55*rho + cRHS74
    cRHS105 = -cRHS104
    cRHS106 = cRHS101*cRHS105
    cRHS107 = cRHS80 + cRHS94
    cRHS108 = -cRHS107
    cRHS109 = 0.622008467928146*rho
    cRHS110 = cRHS108*cRHS109
    cRHS111 = 1/(cRHS60 + cRHS63*math.sqrt((cRHS100 + 0.0717967697244908*v_conv[0,1] + v_conv[2,1])**2 + (cRHS99 + 0.0717967697244908*v_conv[0,0] + v_conv[2,0])**2))
    cRHS112 = rho*(0.0446581987385205*acc[0,0] + 0.622008467928146*acc[2,0] + cRHS102)
    cRHS113 = cRHS112 - cRHS37 + cRHS58*rho + cRHS74
    cRHS114 = -cRHS113
    cRHS115 = cRHS111*cRHS114
    cRHS116 = cRHS83 + cRHS95
    cRHS117 = -cRHS116
    cRHS118 = 0.0446581987385205*rho
    cRHS119 = cRHS117*cRHS118
    cRHS120 = 0.131445855765802*v_conv[0,0]
    cRHS121 = 0.131445855765802*v_conv[2,0]
    cRHS122 = cRHS120 + cRHS121
    cRHS123 = 0.131445855765802*v_conv[1,1]
    cRHS124 = 0.0352208109008645*v_conv[0,1] + 0.0352208109008645*v_conv[2,1]
    cRHS125 = cRHS38*(cRHS122 + 0.490562612162344*v_conv[1,0] + 0.0352208109008645*v_conv[3,0]) + cRHS44*(cRHS123 + cRHS124 + 0.00943738783765593*v_conv[3,1])
    cRHS126 = 0.131445855765802*v_conv[3,0]
    cRHS127 = 0.0352208109008645*v_conv[0,0] + 0.0352208109008645*v_conv[2,0]
    cRHS128 = 0.131445855765802*v_conv[0,1]
    cRHS129 = 0.131445855765802*v_conv[2,1]
    cRHS130 = cRHS128 + cRHS129
    cRHS131 = cRHS38*(cRHS126 + cRHS127 + 0.00943738783765593*v_conv[1,0]) + cRHS44*(cRHS130 + 0.0352208109008645*v_conv[1,1] + 0.490562612162344*v_conv[3,1])
    cRHS132 = cRHS56 + cRHS57
    cRHS133 = cRHS52 + cRHS54
    cRHS134 = 0.166666666666667*cRHS68 + 0.166666666666667*cRHS90
    cRHS135 = 0.25*a*b
    cRHS136 = 0.622008467928146*v[0,1]
    cRHS137 = 0.622008467928146*v[1,1]
    cRHS138 = 0.166666666666667*v[3,1]
    cRHS139 = -0.166666666666667*v[2,1]
    cRHS140 = cRHS138 + cRHS139
    cRHS141 = -cRHS136 + cRHS137 - cRHS140
    cRHS142 = 0.0446581987385205*v[0,1]
    cRHS143 = 0.166666666666667*v[1,1]
    cRHS144 = cRHS139 + cRHS143
    cRHS145 = cRHS142 + cRHS144 - 0.0446581987385205*v[3,1]
    cRHS146 = 0.0446581987385205*v[1,1]
    cRHS147 = -cRHS140 - cRHS142 + cRHS146
    cRHS148 = cRHS136 + cRHS144 - 0.622008467928146*v[3,1]
    cRHS149 = 0.788675134594813*v[3,1]
    cRHS150 = 0.211324865405187*v[1,1]
    cRHS151 = 0.211324865405187*v[0,1] - 0.788675134594813*v[2,1]
    cRHS152 = cRHS149 - cRHS150 + cRHS151
    cRHS153 = -cRHS152
    cRHS154 = 0.788675134594813*v[1,1]
    cRHS155 = 0.211324865405187*v[3,1]
    cRHS156 = cRHS151 + cRHS154 - cRHS155
    cRHS157 = -cRHS156
    cRHS158 = cRHS157*cRHS6
    cRHS159 = 0.788675134594813*v[0,1] - 0.211324865405187*v[2,1]
    cRHS160 = -cRHS154 + cRHS155 + cRHS159
    cRHS161 = -cRHS160
    cRHS162 = -cRHS149 + cRHS150 + cRHS159
    cRHS163 = -cRHS162
    cRHS164 = cRHS163*cRHS6
    cRHS165 = 0.166666666666667*f[1,1] + 0.166666666666667*f[3,1]
    cRHS166 = cRHS165 + 0.622008467928146*f[0,1] + 0.0446581987385205*f[2,1]
    cRHS167 = cRHS166*rho
    cRHS168 = cRHS165 + 0.0446581987385205*f[0,1] + 0.622008467928146*f[2,1]
    cRHS169 = cRHS168*rho
    cRHS170 = cRHS39*cRHS44
    cRHS171 = -cRHS170
    cRHS172 = cRHS153*cRHS43 + cRHS163*cRHS46
    cRHS173 = cRHS157*cRHS49 + cRHS161*cRHS48
    cRHS174 = cRHS161*cRHS52 + cRHS163*cRHS54
    cRHS175 = cRHS153*cRHS56 + cRHS157*cRHS57
    cRHS176 = 0.166666666666667*acc[0,1] + 0.166666666666667*acc[2,1]
    cRHS177 = 0.166666666666667*f[0,1] + 0.166666666666667*f[2,1]
    cRHS178 = cRHS177 + 0.622008467928146*f[1,1] + 0.0446581987385205*f[3,1]
    cRHS179 = -1.0*cRHS38*cRHS44*mu*v[0,0] - 1.0*cRHS38*cRHS44*mu*v[2,0] + cRHS69*v[1,0] + cRHS69*v[3,0]
    cRHS180 = cRHS173*rho - cRHS178*rho + cRHS179 + rho*(0.622008467928146*acc[1,1] + 0.0446581987385205*acc[3,1] + cRHS176)
    cRHS181 = -cRHS180
    cRHS182 = cRHS181*cRHS64
    cRHS183 = cRHS177 + 0.0446581987385205*f[1,1] + 0.622008467928146*f[3,1]
    cRHS184 = cRHS172*rho + cRHS179 - cRHS183*rho + rho*(0.0446581987385205*acc[1,1] + 0.622008467928146*acc[3,1] + cRHS176)
    cRHS185 = -cRHS184
    cRHS186 = cRHS185*cRHS88
    cRHS187 = 0.166666666666667*acc[1,1] + 0.166666666666667*acc[3,1]
    cRHS188 = -cRHS166*rho + cRHS174*rho + cRHS179 + rho*(0.622008467928146*acc[0,1] + 0.0446581987385205*acc[2,1] + cRHS187)
    cRHS189 = -cRHS188
    cRHS190 = cRHS101*cRHS189
    cRHS191 = -cRHS168*rho + cRHS175*rho + cRHS179 + rho*(0.0446581987385205*acc[0,1] + 0.622008467928146*acc[2,1] + cRHS187)
    cRHS192 = -cRHS191
    cRHS193 = cRHS111*cRHS192
    cRHS194 = cRHS178*rho
    cRHS195 = cRHS183*rho
    cRHS196 = 0.166666666666667*cRHS194 + 0.166666666666667*cRHS195
    cRHS197 = -0.0446581987385205*v[2,0]
    cRHS198 = 0.166666666666667*v[0,0]
    cRHS199 = cRHS198 - cRHS2
    cRHS200 = cRHS6*(cRHS197 + cRHS199 + 0.0446581987385205*v[1,0])
    cRHS201 = -0.622008467928146*v[2,0]
    cRHS202 = cRHS6*(cRHS199 + cRHS201 + 0.622008467928146*v[1,0])
    cRHS203 = cRHS31*cRHS6
    cRHS204 = rho*(cRHS18*cRHS56 + cRHS23*cRHS57)
    cRHS205 = rho*(cRHS28*cRHS52 + cRHS31*cRHS54)
    cRHS206 = cRHS23*cRHS6
    cRHS207 = rho*(cRHS23*cRHS49 + cRHS28*cRHS48)
    cRHS208 = rho*(cRHS18*cRHS43 + cRHS31*cRHS46)
    cRHS209 = 0.0352208109008645*v_conv[1,1] + 0.0352208109008645*v_conv[3,1]
    cRHS210 = 0.131445855765802*v_conv[1,0]
    cRHS211 = cRHS126 + cRHS210
    cRHS212 = -cRHS38*(cRHS211 + 0.490562612162344*v_conv[0,0] + 0.0352208109008645*v_conv[2,0]) + cRHS44*(cRHS128 + cRHS209 + 0.00943738783765593*v_conv[2,1])
    cRHS213 = 1.0*rho
    cRHS214 = -cRHS70 - cRHS71 + cRHS72 + cRHS73
    cRHS215 = cRHS101*(cRHS103 - cRHS205 - cRHS214 - cRHS36)
    cRHS216 = 0.131445855765802*v_conv[3,1]
    cRHS217 = cRHS123 + cRHS216
    cRHS218 = 0.0352208109008645*v_conv[1,0] + 0.0352208109008645*v_conv[3,0]
    cRHS219 = -cRHS38*(cRHS121 + cRHS218 + 0.00943738783765593*v_conv[0,0]) + cRHS44*(cRHS217 + 0.0352208109008645*v_conv[0,1] + 0.490562612162344*v_conv[2,1])
    cRHS220 = cRHS111*(cRHS112 - cRHS204 - cRHS214 - cRHS37)
    cRHS221 = -cRHS43 + cRHS46
    cRHS222 = 0.211324865405187*rho
    cRHS223 = cRHS88*(-cRHS208 - cRHS214 + cRHS89 - cRHS90)
    cRHS224 = cRHS107*cRHS86
    cRHS225 = cRHS116*cRHS86
    cRHS226 = -cRHS48 + cRHS49
    cRHS227 = 0.788675134594813*rho
    cRHS228 = cRHS64*(-cRHS207 - cRHS214 + cRHS66 - cRHS68)
    cRHS229 = 0.166666666666667*cRHS36 + 0.166666666666667*cRHS37
    cRHS230 = -0.0446581987385205*v[2,1]
    cRHS231 = 0.166666666666667*v[0,1]
    cRHS232 = -cRHS138 + cRHS231
    cRHS233 = cRHS146 + cRHS230 + cRHS232
    cRHS234 = -0.622008467928146*v[2,1]
    cRHS235 = cRHS137 + cRHS232 + cRHS234
    cRHS236 = cRHS108*cRHS86
    cRHS237 = cRHS117*cRHS86
    cRHS238 = 0.166666666666667*cRHS167 + 0.166666666666667*cRHS169
    cRHS239 = cRHS198 - cRHS9
    cRHS240 = cRHS13 + cRHS201 + cRHS239
    cRHS241 = cRHS197 + cRHS239 + cRHS8
    cRHS242 = cRHS84*cRHS86
    cRHS243 = cRHS86*cRHS96
    cRHS244 = cRHS109*cRHS116
    cRHS245 = cRHS107*cRHS118
    cRHS246 = cRHS38*(cRHS127 + cRHS210 + 0.00943738783765593*v_conv[3,0]) + cRHS44*(cRHS130 + 0.490562612162344*v_conv[1,1] + 0.0352208109008645*v_conv[3,1])
    cRHS247 = cRHS38*(cRHS122 + 0.0352208109008645*v_conv[1,0] + 0.490562612162344*v_conv[3,0]) + cRHS44*(cRHS124 + cRHS216 + 0.00943738783765593*v_conv[1,1])
    cRHS248 = -cRHS143 + cRHS231
    cRHS249 = cRHS234 + cRHS248 + 0.622008467928146*v[3,1]
    cRHS250 = cRHS230 + cRHS248 + 0.0446581987385205*v[3,1]
    cRHS251 = cRHS162*cRHS6
    cRHS252 = cRHS152*cRHS43 + cRHS162*cRHS46
    cRHS253 = cRHS156*cRHS49 + cRHS160*cRHS48
    cRHS254 = cRHS156*cRHS6
    cRHS255 = cRHS152*cRHS56 + cRHS156*cRHS57
    cRHS256 = cRHS160*cRHS52 + cRHS162*cRHS54
    cRHS257 = cRHS180*cRHS64
    cRHS258 = cRHS184*cRHS88
    cRHS259 = cRHS111*cRHS191
    cRHS260 = cRHS101*cRHS188
    cRHS261 = -cRHS38*(cRHS120 + cRHS218 + 0.00943738783765593*v_conv[2,0]) + cRHS44*(cRHS217 + 0.490562612162344*v_conv[0,1] + 0.0352208109008645*v_conv[2,1])
    cRHS262 = -cRHS38*(cRHS211 + 0.0352208109008645*v_conv[0,0] + 0.490562612162344*v_conv[2,0]) + cRHS44*(cRHS129 + cRHS209 + 0.00943738783765593*v_conv[0,1])
    RHS[0] = -cRHS135*(0.788675134594813*cRHS101*cRHS105*cRHS133*rho - cRHS106*cRHS110 + 0.211324865405187*cRHS111*cRHS114*cRHS132*rho - cRHS115*cRHS119 + 1.0*cRHS125*cRHS64*cRHS76*rho + 1.0*cRHS131*cRHS88*cRHS92*rho - cRHS134 - cRHS26*(cRHS20 + cRHS25) - cRHS34*(cRHS30 + cRHS33) - 0.622008467928146*cRHS36 - 0.0446581987385205*cRHS37 - cRHS41 + 0.166666666666667*cRHS47*rho + 0.166666666666667*cRHS50*rho + 0.622008467928146*cRHS55*rho + 0.0446581987385205*cRHS58*rho - cRHS77*cRHS87 - cRHS93*cRHS98 - mu*(-cRHS0*cRHS12 + cRHS14) - mu*(-cRHS0*cRHS5 + cRHS11))
    RHS[1] = -cRHS135*(0.788675134594813*cRHS101*cRHS133*cRHS189*rho - cRHS110*cRHS190 + 0.211324865405187*cRHS111*cRHS132*cRHS192*rho - cRHS119*cRHS193 + 1.0*cRHS125*cRHS181*cRHS64*rho + 1.0*cRHS131*cRHS185*cRHS88*rho - 0.622008467928146*cRHS167 - 0.0446581987385205*cRHS169 - cRHS171 + 0.166666666666667*cRHS172*rho + 0.166666666666667*cRHS173*rho + 0.622008467928146*cRHS174*rho + 0.0446581987385205*cRHS175*rho - cRHS182*cRHS87 - cRHS186*cRHS98 - cRHS196 - cRHS26*(cRHS0*cRHS153 + cRHS158) - cRHS34*(cRHS0*cRHS161 + cRHS164) - mu*(cRHS0*cRHS141 - cRHS145*cRHS6) - mu*(cRHS0*cRHS147 - cRHS148*cRHS6))
    RHS[2] = cRHS135*(cRHS109*cRHS228*cRHS84 + cRHS118*cRHS223*cRHS96 + 0.166666666666667*cRHS204 + 0.166666666666667*cRHS205 + 0.622008467928146*cRHS207 + 0.0446581987385205*cRHS208 + cRHS212*cRHS213*cRHS215 + cRHS213*cRHS219*cRHS220 + cRHS215*cRHS224 + cRHS220*cRHS225 + cRHS221*cRHS222*cRHS223 + cRHS226*cRHS227*cRHS228 + cRHS229 + cRHS26*(cRHS0*cRHS18 - cRHS203) + cRHS34*(cRHS0*cRHS28 - cRHS206) + cRHS40 + 0.622008467928146*cRHS68 + 0.0446581987385205*cRHS90 + mu*(cRHS0*cRHS12 - cRHS202) + mu*(cRHS0*cRHS5 - cRHS200))
    RHS[3] = -cRHS135*(-cRHS109*cRHS182*cRHS85 - cRHS118*cRHS186*cRHS97 - cRHS171 + 0.0446581987385205*cRHS172*rho + 0.622008467928146*cRHS173*rho + 0.166666666666667*cRHS174*rho + 0.166666666666667*cRHS175*rho + cRHS182*cRHS226*cRHS227 + cRHS186*cRHS221*cRHS222 + cRHS190*cRHS212*cRHS213 - cRHS190*cRHS236 + cRHS193*cRHS213*cRHS219 - cRHS193*cRHS237 - 0.622008467928146*cRHS194 - 0.0446581987385205*cRHS195 - cRHS238 + mu*(cRHS0*cRHS141 + cRHS233*cRHS6) + mu*(cRHS0*cRHS147 + cRHS235*cRHS6) + 0.211324865405187*mu*(cRHS0*cRHS153 - cRHS164) + 0.788675134594813*mu*(cRHS0*cRHS161 - cRHS158))
    RHS[4] = -cRHS135*(0.211324865405187*cRHS101*cRHS104*cRHS133*rho - cRHS101*cRHS104*cRHS245 + 0.788675134594813*cRHS111*cRHS113*cRHS132*rho - cRHS111*cRHS113*cRHS244 - cRHS134 - 0.622008467928146*cRHS204 - 0.0446581987385205*cRHS205 - 0.166666666666667*cRHS207 - 0.166666666666667*cRHS208 - cRHS242*cRHS64*cRHS75 - cRHS243*cRHS88*cRHS91 + 1.0*cRHS246*cRHS64*cRHS75*rho + 1.0*cRHS247*cRHS88*cRHS91*rho - cRHS26*(cRHS0*cRHS28 + cRHS203) - cRHS34*(cRHS0*cRHS18 + cRHS206) - 0.0446581987385205*cRHS36 - 0.622008467928146*cRHS37 - cRHS40 - mu*(cRHS0*cRHS240 + cRHS200) - mu*(cRHS0*cRHS241 + cRHS202))
    RHS[5] = -cRHS135*(0.211324865405187*cRHS101*cRHS133*cRHS188*rho - cRHS109*cRHS255 + 0.788675134594813*cRHS111*cRHS132*cRHS191*rho - cRHS118*cRHS256 - 0.0446581987385205*cRHS167 - 0.622008467928146*cRHS169 - cRHS170 + 1.0*cRHS180*cRHS246*cRHS64*rho + 1.0*cRHS184*cRHS247*cRHS88*rho - cRHS196 - cRHS242*cRHS257 - cRHS243*cRHS258 - cRHS244*cRHS259 - cRHS245*cRHS260 - cRHS252*cRHS86 - cRHS253*cRHS86 - cRHS26*(cRHS0*cRHS160 + cRHS251) - cRHS34*(cRHS0*cRHS152 + cRHS254) - mu*(cRHS0*cRHS249 + cRHS233*cRHS6) - mu*(cRHS0*cRHS250 + cRHS235*cRHS6))
    RHS[6] = -cRHS135*(-cRHS106*cRHS213*cRHS261 - cRHS106*cRHS236 - cRHS109*cRHS93*cRHS97 - cRHS115*cRHS213*cRHS262 - cRHS115*cRHS237 - cRHS118*cRHS77*cRHS85 - cRHS221*cRHS227*cRHS93 - cRHS222*cRHS226*cRHS77 - cRHS229 - cRHS41 + 0.622008467928146*cRHS47*rho + 0.0446581987385205*cRHS50*rho + 0.166666666666667*cRHS55*rho + 0.166666666666667*cRHS58*rho - 0.0446581987385205*cRHS68 - 0.622008467928146*cRHS90 + 0.788675134594813*mu*(-cRHS20 + cRHS33) + 0.211324865405187*mu*(cRHS25 - cRHS30) + mu*(cRHS0*cRHS240 + cRHS11) + mu*(cRHS0*cRHS241 + cRHS14))
    RHS[7] = -cRHS135*(1.0*cRHS101*cRHS188*cRHS261*rho - cRHS109*cRHS252 - cRHS109*cRHS258*cRHS96 + 1.0*cRHS111*cRHS191*cRHS262*rho - cRHS118*cRHS253 - cRHS118*cRHS257*cRHS84 - cRHS170 + 0.211324865405187*cRHS180*cRHS226*cRHS64*rho + 0.788675134594813*cRHS184*cRHS221*cRHS88*rho - 0.0446581987385205*cRHS194 - 0.622008467928146*cRHS195 - cRHS224*cRHS260 - cRHS225*cRHS259 - cRHS238 - cRHS255*cRHS86 - cRHS256*cRHS86 + 0.788675134594813*mu*(cRHS0*cRHS152 - cRHS251) + 0.211324865405187*mu*(cRHS0*cRHS160 - cRHS254) + mu*(cRHS0*cRHS249 - cRHS145*cRHS6) + mu*(cRHS0*cRHS250 - cRHS148*cRHS6))

    return RHS

def GetCellGradientOperator(a, b, c):
    G = numpy.empty(4,2)
    cG0 = 0.5*b
    cG1 = -cG0
    cG2 = 0.5*a
    cG3 = -cG2
    G[0,0] = cG1
    G[0,1] = cG3
    G[1,0] = cG0
    G[1,1] = cG3
    G[2,0] = cG0
    G[2,1] = cG2
    G[3,0] = cG1
    G[3,1] = cG2

    return G