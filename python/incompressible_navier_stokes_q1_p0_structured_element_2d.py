import math
import numpy

def CalculateRightHandSide(a, b, c, mu, rho, v, p, f, acc):
    RHS = numpy.empty(8)
    cRHS0 = a**(-2)
    cRHS1 = 0.622008467928146*v[0,0]
    cRHS2 = 0.166666666666667*v[3,0]
    cRHS3 = -0.166666666666667*v[2,0]
    cRHS4 = cRHS2 + cRHS3
    cRHS5 = cRHS1 + cRHS4 - 0.622008467928146*v[1,0]
    cRHS6 = b**(-2)
    cRHS7 = 0.0446581987385205*v[0,0]
    cRHS8 = 0.0446581987385205*v[3,0]
    cRHS9 = 0.166666666666667*v[1,0]
    cRHS10 = cRHS3 + cRHS9
    cRHS11 = cRHS6*(-cRHS10 - cRHS7 + cRHS8)
    cRHS12 = cRHS4 + cRHS7 - 0.0446581987385205*v[1,0]
    cRHS13 = 0.622008467928146*v[3,0]
    cRHS14 = cRHS6*(-cRHS1 - cRHS10 + cRHS13)
    cRHS15 = 0.788675134594813*v[3,0]
    cRHS16 = 0.211324865405187*v[1,0]
    cRHS17 = 0.211324865405187*v[0,0]
    cRHS18 = cRHS17 - 0.788675134594813*v[2,0]
    cRHS19 = cRHS15 - cRHS16 + cRHS18
    cRHS20 = -cRHS19
    cRHS21 = cRHS0*cRHS20
    cRHS22 = 0.788675134594813*v[1,0]
    cRHS23 = 0.211324865405187*v[3,0]
    cRHS24 = cRHS18 + cRHS22 - cRHS23
    cRHS25 = -cRHS24
    cRHS26 = cRHS25*cRHS6
    cRHS27 = 0.211324865405187*mu
    cRHS28 = 0.788675134594813*v[0,0]
    cRHS29 = cRHS28 - 0.211324865405187*v[2,0]
    cRHS30 = -cRHS22 + cRHS23 + cRHS29
    cRHS31 = -cRHS30
    cRHS32 = cRHS0*cRHS31
    cRHS33 = -cRHS15 + cRHS16 + cRHS29
    cRHS34 = -cRHS33
    cRHS35 = cRHS34*cRHS6
    cRHS36 = 0.788675134594813*mu
    cRHS37 = 0.166666666666667*f[1,0] + 0.166666666666667*f[3,0]
    cRHS38 = rho*(cRHS37 + 0.622008467928146*f[0,0] + 0.0446581987385205*f[2,0])
    cRHS39 = rho*(cRHS37 + 0.0446581987385205*f[0,0] + 0.622008467928146*f[2,0])
    cRHS40 = 1/a
    cRHS41 = 2.0*p
    cRHS42 = cRHS40*cRHS41
    cRHS43 = -cRHS42
    cRHS44 = 0.0446581987385205*v[1,0]
    cRHS45 = 0.166666666666667*v[0,0]
    cRHS46 = cRHS45 + 0.166666666666667*v[2,0]
    cRHS47 = cRHS40*(cRHS13 + cRHS44 + cRHS46)
    cRHS48 = 1/b
    cRHS49 = 0.622008467928146*v[3,1]
    cRHS50 = 0.0446581987385205*v[1,1]
    cRHS51 = 0.166666666666667*v[0,1]
    cRHS52 = cRHS51 + 0.166666666666667*v[2,1]
    cRHS53 = cRHS48*(cRHS49 + cRHS50 + cRHS52)
    cRHS54 = cRHS20*cRHS47 + cRHS34*cRHS53
    cRHS55 = 0.622008467928146*v[1,0]
    cRHS56 = cRHS40*(cRHS46 + cRHS55 + cRHS8)
    cRHS57 = 0.622008467928146*v[1,1]
    cRHS58 = 0.0446581987385205*v[3,1]
    cRHS59 = cRHS48*(cRHS52 + cRHS57 + cRHS58)
    cRHS60 = cRHS25*cRHS59 + cRHS31*cRHS56
    cRHS61 = 0.0446581987385205*v[2,0]
    cRHS62 = cRHS2 + cRHS9
    cRHS63 = cRHS40*(cRHS1 + cRHS61 + cRHS62)
    cRHS64 = 0.622008467928146*v[0,1]
    cRHS65 = 0.0446581987385205*v[2,1]
    cRHS66 = 0.166666666666667*v[1,1]
    cRHS67 = 0.166666666666667*v[3,1]
    cRHS68 = cRHS66 + cRHS67
    cRHS69 = cRHS48*(cRHS64 + cRHS65 + cRHS68)
    cRHS70 = cRHS31*cRHS63 + cRHS34*cRHS69
    cRHS71 = 0.622008467928146*v[2,0]
    cRHS72 = cRHS40*(cRHS62 + cRHS7 + cRHS71)
    cRHS73 = 0.622008467928146*v[2,1]
    cRHS74 = 0.0446581987385205*v[0,1]
    cRHS75 = cRHS48*(cRHS68 + cRHS73 + cRHS74)
    cRHS76 = cRHS20*cRHS72 + cRHS25*cRHS75
    cRHS77 = cRHS40*cRHS48*mu
    cRHS78 = 16.0*cRHS77
    cRHS79 = 0.267949192431123*v[0,0] + 0.267949192431123*v[2,0]
    cRHS80 = 0.267949192431123*v[0,1] + 0.267949192431123*v[2,1]
    cRHS81 = 2.48803387171258*rho/(math.sqrt(a)*math.sqrt(b))
    cRHS82 = 1/(cRHS78 + cRHS81*math.sqrt((cRHS79 + v[1,0] + 0.0717967697244908*v[3,0])**2 + (cRHS80 + v[1,1] + 0.0717967697244908*v[3,1])**2))
    cRHS83 = 0.166666666666667*acc[0,0] + 0.166666666666667*acc[2,0]
    cRHS84 = rho*(0.622008467928146*acc[1,0] + 0.0446581987385205*acc[3,0] + cRHS83)
    cRHS85 = 0.166666666666667*f[0,0] + 0.166666666666667*f[2,0]
    cRHS86 = rho*(cRHS85 + 0.622008467928146*f[1,0] + 0.0446581987385205*f[3,0])
    cRHS87 = 1.0*cRHS77
    cRHS88 = cRHS87*v[1,1]
    cRHS89 = cRHS87*v[3,1]
    cRHS90 = cRHS87*v[0,1]
    cRHS91 = cRHS87*v[2,1]
    cRHS92 = cRHS88 + cRHS89 - cRHS90 - cRHS91
    cRHS93 = cRHS60*rho + cRHS84 - cRHS86 + cRHS92
    cRHS94 = -cRHS93
    cRHS95 = cRHS82*cRHS94
    cRHS96 = cRHS23*cRHS40 + cRHS28*cRHS40 - 0.788675134594813*cRHS40*v[1,0] - 0.211324865405187*cRHS40*v[2,0]
    cRHS97 = 0.211324865405187*v[0,1]
    cRHS98 = 0.788675134594813*v[1,1]
    cRHS99 = cRHS48*cRHS97 + cRHS48*cRHS98 - 0.788675134594813*cRHS48*v[2,1] - 0.211324865405187*cRHS48*v[3,1]
    cRHS100 = cRHS96 + cRHS99
    cRHS101 = -cRHS100
    cRHS102 = 0.166666666666667*rho
    cRHS103 = cRHS101*cRHS102
    cRHS104 = 1/(cRHS78 + cRHS81*math.sqrt((cRHS79 + 0.0717967697244908*v[1,0] + v[3,0])**2 + (cRHS80 + 0.0717967697244908*v[1,1] + v[3,1])**2))
    cRHS105 = rho*(0.0446581987385205*acc[1,0] + 0.622008467928146*acc[3,0] + cRHS83)
    cRHS106 = rho*(cRHS85 + 0.0446581987385205*f[1,0] + 0.622008467928146*f[3,0])
    cRHS107 = cRHS105 - cRHS106 + cRHS54*rho + cRHS92
    cRHS108 = -cRHS107
    cRHS109 = cRHS104*cRHS108
    cRHS110 = 0.211324865405187*v[1,1]
    cRHS111 = 0.788675134594813*v[0,1]
    cRHS112 = cRHS110*cRHS48 + cRHS111*cRHS48 - 0.211324865405187*cRHS48*v[2,1] - 0.788675134594813*cRHS48*v[3,1]
    cRHS113 = cRHS15*cRHS40 + cRHS17*cRHS40 - 0.211324865405187*cRHS40*v[1,0] - 0.788675134594813*cRHS40*v[2,0]
    cRHS114 = cRHS112 + cRHS113
    cRHS115 = -cRHS114
    cRHS116 = cRHS102*cRHS115
    cRHS117 = 0.267949192431123*v[1,0] + 0.267949192431123*v[3,0]
    cRHS118 = 0.267949192431123*v[1,1] + 0.267949192431123*v[3,1]
    cRHS119 = 1/(cRHS78 + cRHS81*math.sqrt((cRHS117 + v[0,0] + 0.0717967697244908*v[2,0])**2 + (cRHS118 + v[0,1] + 0.0717967697244908*v[2,1])**2))
    cRHS120 = 0.166666666666667*acc[1,0] + 0.166666666666667*acc[3,0]
    cRHS121 = rho*(0.622008467928146*acc[0,0] + 0.0446581987385205*acc[2,0] + cRHS120)
    cRHS122 = cRHS121 - cRHS38 + cRHS70*rho + cRHS92
    cRHS123 = -cRHS122
    cRHS124 = cRHS119*cRHS123
    cRHS125 = cRHS112 + cRHS96
    cRHS126 = -cRHS125
    cRHS127 = 0.622008467928146*rho
    cRHS128 = cRHS126*cRHS127
    cRHS129 = 1/(cRHS78 + cRHS81*math.sqrt((cRHS117 + 0.0717967697244908*v[0,0] + v[2,0])**2 + (cRHS118 + 0.0717967697244908*v[0,1] + v[2,1])**2))
    cRHS130 = rho*(0.0446581987385205*acc[0,0] + 0.622008467928146*acc[2,0] + cRHS120)
    cRHS131 = cRHS130 - cRHS39 + cRHS76*rho + cRHS92
    cRHS132 = -cRHS131
    cRHS133 = cRHS129*cRHS132
    cRHS134 = cRHS113 + cRHS99
    cRHS135 = -cRHS134
    cRHS136 = 0.0446581987385205*rho
    cRHS137 = cRHS135*cRHS136
    cRHS138 = 0.131445855765802*v[0,0]
    cRHS139 = 0.131445855765802*v[2,0]
    cRHS140 = cRHS138 + cRHS139
    cRHS141 = 0.131445855765802*v[1,1]
    cRHS142 = 0.0352208109008645*v[0,1] + 0.0352208109008645*v[2,1]
    cRHS143 = cRHS40*(cRHS140 + 0.490562612162344*v[1,0] + 0.0352208109008645*v[3,0]) + cRHS48*(cRHS141 + cRHS142 + 0.00943738783765593*v[3,1])
    cRHS144 = 0.131445855765802*v[3,0]
    cRHS145 = 0.0352208109008645*v[0,0] + 0.0352208109008645*v[2,0]
    cRHS146 = 0.131445855765802*v[0,1]
    cRHS147 = 0.131445855765802*v[2,1]
    cRHS148 = cRHS146 + cRHS147
    cRHS149 = cRHS40*(cRHS144 + cRHS145 + 0.00943738783765593*v[1,0]) + cRHS48*(cRHS148 + 0.0352208109008645*v[1,1] + 0.490562612162344*v[3,1])
    cRHS150 = cRHS72 + cRHS75
    cRHS151 = cRHS63 + cRHS69
    cRHS152 = 0.166666666666667*cRHS106 + 0.166666666666667*cRHS86
    cRHS153 = 0.25*a*b
    cRHS154 = -0.166666666666667*v[2,1]
    cRHS155 = cRHS154 + cRHS67
    cRHS156 = -cRHS155 + cRHS57 - cRHS64
    cRHS157 = cRHS154 + cRHS66
    cRHS158 = cRHS157 + cRHS74 - 0.0446581987385205*v[3,1]
    cRHS159 = -cRHS155 + cRHS50 - cRHS74
    cRHS160 = cRHS157 + cRHS64 - 0.622008467928146*v[3,1]
    cRHS161 = 0.788675134594813*v[3,1]
    cRHS162 = cRHS97 - 0.788675134594813*v[2,1]
    cRHS163 = -cRHS110 + cRHS161 + cRHS162
    cRHS164 = -cRHS163
    cRHS165 = 0.211324865405187*v[3,1]
    cRHS166 = cRHS162 - cRHS165 + cRHS98
    cRHS167 = -cRHS166
    cRHS168 = cRHS167*cRHS6
    cRHS169 = cRHS111 - 0.211324865405187*v[2,1]
    cRHS170 = cRHS165 + cRHS169 - cRHS98
    cRHS171 = -cRHS170
    cRHS172 = cRHS110 - cRHS161 + cRHS169
    cRHS173 = -cRHS172
    cRHS174 = cRHS173*cRHS6
    cRHS175 = 0.166666666666667*f[1,1] + 0.166666666666667*f[3,1]
    cRHS176 = cRHS175 + 0.622008467928146*f[0,1] + 0.0446581987385205*f[2,1]
    cRHS177 = cRHS176*rho
    cRHS178 = cRHS175 + 0.0446581987385205*f[0,1] + 0.622008467928146*f[2,1]
    cRHS179 = cRHS178*rho
    cRHS180 = cRHS41*cRHS48
    cRHS181 = -cRHS180
    cRHS182 = cRHS164*cRHS47 + cRHS173*cRHS53
    cRHS183 = cRHS167*cRHS59 + cRHS171*cRHS56
    cRHS184 = cRHS171*cRHS63 + cRHS173*cRHS69
    cRHS185 = cRHS164*cRHS72 + cRHS167*cRHS75
    cRHS186 = 0.166666666666667*acc[0,1] + 0.166666666666667*acc[2,1]
    cRHS187 = 0.166666666666667*f[0,1] + 0.166666666666667*f[2,1]
    cRHS188 = cRHS187 + 0.622008467928146*f[1,1] + 0.0446581987385205*f[3,1]
    cRHS189 = -1.0*cRHS40*cRHS48*mu*v[0,0] - 1.0*cRHS40*cRHS48*mu*v[2,0] + cRHS87*v[1,0] + cRHS87*v[3,0]
    cRHS190 = cRHS183*rho - cRHS188*rho + cRHS189 + rho*(0.622008467928146*acc[1,1] + 0.0446581987385205*acc[3,1] + cRHS186)
    cRHS191 = -cRHS190
    cRHS192 = cRHS191*cRHS82
    cRHS193 = cRHS187 + 0.0446581987385205*f[1,1] + 0.622008467928146*f[3,1]
    cRHS194 = cRHS182*rho + cRHS189 - cRHS193*rho + rho*(0.0446581987385205*acc[1,1] + 0.622008467928146*acc[3,1] + cRHS186)
    cRHS195 = -cRHS194
    cRHS196 = cRHS104*cRHS195
    cRHS197 = 0.166666666666667*acc[1,1] + 0.166666666666667*acc[3,1]
    cRHS198 = -cRHS176*rho + cRHS184*rho + cRHS189 + rho*(0.622008467928146*acc[0,1] + 0.0446581987385205*acc[2,1] + cRHS197)
    cRHS199 = -cRHS198
    cRHS200 = cRHS119*cRHS199
    cRHS201 = -cRHS178*rho + cRHS185*rho + cRHS189 + rho*(0.0446581987385205*acc[0,1] + 0.622008467928146*acc[2,1] + cRHS197)
    cRHS202 = -cRHS201
    cRHS203 = cRHS129*cRHS202
    cRHS204 = cRHS188*rho
    cRHS205 = cRHS193*rho
    cRHS206 = 0.166666666666667*cRHS204 + 0.166666666666667*cRHS205
    cRHS207 = -cRHS61
    cRHS208 = -cRHS2 + cRHS45
    cRHS209 = cRHS6*(cRHS207 + cRHS208 + cRHS44)
    cRHS210 = -cRHS71
    cRHS211 = cRHS6*(cRHS208 + cRHS210 + cRHS55)
    cRHS212 = cRHS33*cRHS6
    cRHS213 = rho*(cRHS19*cRHS72 + cRHS24*cRHS75)
    cRHS214 = rho*(cRHS30*cRHS63 + cRHS33*cRHS69)
    cRHS215 = cRHS24*cRHS6
    cRHS216 = rho*(cRHS24*cRHS59 + cRHS30*cRHS56)
    cRHS217 = rho*(cRHS19*cRHS47 + cRHS33*cRHS53)
    cRHS218 = 0.0352208109008645*v[1,1] + 0.0352208109008645*v[3,1]
    cRHS219 = 0.131445855765802*v[1,0]
    cRHS220 = cRHS144 + cRHS219
    cRHS221 = -cRHS40*(cRHS220 + 0.490562612162344*v[0,0] + 0.0352208109008645*v[2,0]) + cRHS48*(cRHS146 + cRHS218 + 0.00943738783765593*v[2,1])
    cRHS222 = 1.0*rho
    cRHS223 = -cRHS88 - cRHS89 + cRHS90 + cRHS91
    cRHS224 = cRHS119*(cRHS121 - cRHS214 - cRHS223 - cRHS38)
    cRHS225 = 0.131445855765802*v[3,1]
    cRHS226 = cRHS141 + cRHS225
    cRHS227 = 0.0352208109008645*v[1,0] + 0.0352208109008645*v[3,0]
    cRHS228 = -cRHS40*(cRHS139 + cRHS227 + 0.00943738783765593*v[0,0]) + cRHS48*(cRHS226 + 0.0352208109008645*v[0,1] + 0.490562612162344*v[2,1])
    cRHS229 = cRHS129*(cRHS130 - cRHS213 - cRHS223 - cRHS39)
    cRHS230 = -cRHS47 + cRHS53
    cRHS231 = 0.211324865405187*rho
    cRHS232 = cRHS104*(cRHS105 - cRHS106 - cRHS217 - cRHS223)
    cRHS233 = cRHS102*cRHS125
    cRHS234 = cRHS102*cRHS134
    cRHS235 = -cRHS56 + cRHS59
    cRHS236 = 0.788675134594813*rho
    cRHS237 = cRHS82*(-cRHS216 - cRHS223 + cRHS84 - cRHS86)
    cRHS238 = 0.166666666666667*cRHS38 + 0.166666666666667*cRHS39
    cRHS239 = -cRHS65
    cRHS240 = cRHS51 - cRHS67
    cRHS241 = cRHS239 + cRHS240 + cRHS50
    cRHS242 = -cRHS73
    cRHS243 = cRHS240 + cRHS242 + cRHS57
    cRHS244 = cRHS102*cRHS126
    cRHS245 = cRHS102*cRHS135
    cRHS246 = 0.166666666666667*cRHS177 + 0.166666666666667*cRHS179
    cRHS247 = cRHS45 - cRHS9
    cRHS248 = cRHS13 + cRHS210 + cRHS247
    cRHS249 = cRHS207 + cRHS247 + cRHS8
    cRHS250 = cRHS100*cRHS102
    cRHS251 = cRHS102*cRHS114
    cRHS252 = cRHS127*cRHS134
    cRHS253 = cRHS125*cRHS136
    cRHS254 = cRHS40*(cRHS145 + cRHS219 + 0.00943738783765593*v[3,0]) + cRHS48*(cRHS148 + 0.490562612162344*v[1,1] + 0.0352208109008645*v[3,1])
    cRHS255 = cRHS40*(cRHS140 + 0.0352208109008645*v[1,0] + 0.490562612162344*v[3,0]) + cRHS48*(cRHS142 + cRHS225 + 0.00943738783765593*v[1,1])
    cRHS256 = cRHS51 - cRHS66
    cRHS257 = cRHS242 + cRHS256 + cRHS49
    cRHS258 = cRHS239 + cRHS256 + cRHS58
    cRHS259 = cRHS172*cRHS6
    cRHS260 = cRHS163*cRHS47 + cRHS172*cRHS53
    cRHS261 = cRHS166*cRHS59 + cRHS170*cRHS56
    cRHS262 = cRHS166*cRHS6
    cRHS263 = cRHS163*cRHS72 + cRHS166*cRHS75
    cRHS264 = cRHS170*cRHS63 + cRHS172*cRHS69
    cRHS265 = cRHS190*cRHS82
    cRHS266 = cRHS104*cRHS194
    cRHS267 = cRHS129*cRHS201
    cRHS268 = cRHS119*cRHS198
    cRHS269 = -cRHS40*(cRHS138 + cRHS227 + 0.00943738783765593*v[2,0]) + cRHS48*(cRHS226 + 0.490562612162344*v[0,1] + 0.0352208109008645*v[2,1])
    cRHS270 = -cRHS40*(cRHS220 + 0.0352208109008645*v[0,0] + 0.490562612162344*v[2,0]) + cRHS48*(cRHS147 + cRHS218 + 0.00943738783765593*v[0,1])
    RHS[0] = -cRHS153*(-cRHS103*cRHS95 + 1.0*cRHS104*cRHS108*cRHS149*rho - cRHS109*cRHS116 + 0.788675134594813*cRHS119*cRHS123*cRHS151*rho - cRHS124*cRHS128 + 0.211324865405187*cRHS129*cRHS132*cRHS150*rho - cRHS133*cRHS137 + 1.0*cRHS143*cRHS82*cRHS94*rho - cRHS152 - cRHS27*(cRHS21 + cRHS26) - cRHS36*(cRHS32 + cRHS35) - 0.622008467928146*cRHS38 - 0.0446581987385205*cRHS39 - cRHS43 + 0.166666666666667*cRHS54*rho + 0.166666666666667*cRHS60*rho + 0.622008467928146*cRHS70*rho + 0.0446581987385205*cRHS76*rho - mu*(-cRHS0*cRHS12 + cRHS14) - mu*(-cRHS0*cRHS5 + cRHS11))
    RHS[1] = -cRHS153*(-cRHS103*cRHS192 + 1.0*cRHS104*cRHS149*cRHS195*rho - cRHS116*cRHS196 + 0.788675134594813*cRHS119*cRHS151*cRHS199*rho - cRHS128*cRHS200 + 0.211324865405187*cRHS129*cRHS150*cRHS202*rho - cRHS137*cRHS203 + 1.0*cRHS143*cRHS191*cRHS82*rho - 0.622008467928146*cRHS177 - 0.0446581987385205*cRHS179 - cRHS181 + 0.166666666666667*cRHS182*rho + 0.166666666666667*cRHS183*rho + 0.622008467928146*cRHS184*rho + 0.0446581987385205*cRHS185*rho - cRHS206 - cRHS27*(cRHS0*cRHS164 + cRHS168) - cRHS36*(cRHS0*cRHS171 + cRHS174) - mu*(cRHS0*cRHS156 - cRHS158*cRHS6) - mu*(cRHS0*cRHS159 - cRHS160*cRHS6))
    RHS[2] = cRHS153*(cRHS100*cRHS127*cRHS237 + 0.0446581987385205*cRHS106 + cRHS114*cRHS136*cRHS232 + 0.166666666666667*cRHS213 + 0.166666666666667*cRHS214 + 0.622008467928146*cRHS216 + 0.0446581987385205*cRHS217 + cRHS221*cRHS222*cRHS224 + cRHS222*cRHS228*cRHS229 + cRHS224*cRHS233 + cRHS229*cRHS234 + cRHS230*cRHS231*cRHS232 + cRHS235*cRHS236*cRHS237 + cRHS238 + cRHS27*(cRHS0*cRHS19 - cRHS212) + cRHS36*(cRHS0*cRHS30 - cRHS215) + cRHS42 + 0.622008467928146*cRHS86 + mu*(cRHS0*cRHS12 - cRHS211) + mu*(cRHS0*cRHS5 - cRHS209))
    RHS[3] = -cRHS153*(-cRHS101*cRHS127*cRHS192 - cRHS115*cRHS136*cRHS196 - cRHS181 + 0.0446581987385205*cRHS182*rho + 0.622008467928146*cRHS183*rho + 0.166666666666667*cRHS184*rho + 0.166666666666667*cRHS185*rho + cRHS192*cRHS235*cRHS236 + cRHS196*cRHS230*cRHS231 + cRHS200*cRHS221*cRHS222 - cRHS200*cRHS244 + cRHS203*cRHS222*cRHS228 - cRHS203*cRHS245 - 0.622008467928146*cRHS204 - 0.0446581987385205*cRHS205 - cRHS246 + mu*(cRHS0*cRHS156 + cRHS241*cRHS6) + mu*(cRHS0*cRHS159 + cRHS243*cRHS6) + 0.211324865405187*mu*(cRHS0*cRHS164 - cRHS174) + 0.788675134594813*mu*(cRHS0*cRHS171 - cRHS168))
    RHS[4] = -cRHS153*(-cRHS104*cRHS107*cRHS251 + 1.0*cRHS104*cRHS107*cRHS255*rho + 0.211324865405187*cRHS119*cRHS122*cRHS151*rho - cRHS119*cRHS122*cRHS253 + 0.788675134594813*cRHS129*cRHS131*cRHS150*rho - cRHS129*cRHS131*cRHS252 - cRHS152 - 0.622008467928146*cRHS213 - 0.0446581987385205*cRHS214 - 0.166666666666667*cRHS216 - 0.166666666666667*cRHS217 - cRHS250*cRHS82*cRHS93 + 1.0*cRHS254*cRHS82*cRHS93*rho - cRHS27*(cRHS0*cRHS30 + cRHS212) - cRHS36*(cRHS0*cRHS19 + cRHS215) - 0.0446581987385205*cRHS38 - 0.622008467928146*cRHS39 - cRHS42 - mu*(cRHS0*cRHS248 + cRHS209) - mu*(cRHS0*cRHS249 + cRHS211))
    RHS[5] = -cRHS153*(-cRHS102*cRHS260 - cRHS102*cRHS261 + 1.0*cRHS104*cRHS194*cRHS255*rho + 0.211324865405187*cRHS119*cRHS151*cRHS198*rho - cRHS127*cRHS263 + 0.788675134594813*cRHS129*cRHS150*cRHS201*rho - cRHS136*cRHS264 - 0.0446581987385205*cRHS177 - 0.622008467928146*cRHS179 - cRHS180 + 1.0*cRHS190*cRHS254*cRHS82*rho - cRHS206 - cRHS250*cRHS265 - cRHS251*cRHS266 - cRHS252*cRHS267 - cRHS253*cRHS268 - cRHS27*(cRHS0*cRHS170 + cRHS259) - cRHS36*(cRHS0*cRHS163 + cRHS262) - mu*(cRHS0*cRHS257 + cRHS241*cRHS6) - mu*(cRHS0*cRHS258 + cRHS243*cRHS6))
    RHS[6] = -cRHS153*(-cRHS101*cRHS136*cRHS95 - 0.622008467928146*cRHS106 - cRHS109*cRHS115*cRHS127 - cRHS109*cRHS230*cRHS236 - cRHS124*cRHS222*cRHS269 - cRHS124*cRHS244 - cRHS133*cRHS222*cRHS270 - cRHS133*cRHS245 - cRHS231*cRHS235*cRHS95 - cRHS238 - cRHS43 + 0.622008467928146*cRHS54*rho + 0.0446581987385205*cRHS60*rho + 0.166666666666667*cRHS70*rho + 0.166666666666667*cRHS76*rho - 0.0446581987385205*cRHS86 + 0.788675134594813*mu*(-cRHS21 + cRHS35) + 0.211324865405187*mu*(cRHS26 - cRHS32) + mu*(cRHS0*cRHS248 + cRHS11) + mu*(cRHS0*cRHS249 + cRHS14))
    RHS[7] = -cRHS153*(-cRHS100*cRHS136*cRHS265 - cRHS102*cRHS263 - cRHS102*cRHS264 + 0.788675134594813*cRHS104*cRHS194*cRHS230*rho - cRHS114*cRHS127*cRHS266 + 1.0*cRHS119*cRHS198*cRHS269*rho - cRHS127*cRHS260 + 1.0*cRHS129*cRHS201*cRHS270*rho - cRHS136*cRHS261 - cRHS180 + 0.211324865405187*cRHS190*cRHS235*cRHS82*rho - 0.0446581987385205*cRHS204 - 0.622008467928146*cRHS205 - cRHS233*cRHS268 - cRHS234*cRHS267 - cRHS246 + 0.788675134594813*mu*(cRHS0*cRHS163 - cRHS259) + 0.211324865405187*mu*(cRHS0*cRHS170 - cRHS262) + mu*(cRHS0*cRHS257 - cRHS158*cRHS6) + mu*(cRHS0*cRHS258 - cRHS160*cRHS6))

    return RHS

def GetCellGradientOperator(a, b, c):
    G = numpy.empty((4,2))
    cG0 = 0.5*b
    cG1 = -cG0
    cG2 = 0.5*a
    cG3 = -cG2
    G[0,0] = cG1
    G[0,1] = cG3
    G[1,0] = cG0
    G[1,1] = cG3
    G[2,0] = cG0
    G[2,1] = cG2
    G[3,0] = cG1
    G[3,1] = cG2

    return G